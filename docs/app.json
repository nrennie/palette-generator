[{"name":"app.R","content":"library(shiny)\r\nlibrary(htmltools)\r\nlibrary(shinythemes)\r\n\r\n# Functions ---------------------------------------------------------------\r\n\r\n# From https://github.com/nrennie/usefunc/blob/main/R/random_hex.R\r\nrandom_hex <- function(n) {\r\n  generate_hex <- function() {\r\n    choices <- sample(c(as.character(0:9), LETTERS[1:6]),\r\n      size = 6, replace = TRUE\r\n    )\r\n    output <- paste0(\"#\", paste0(choices, collapse = \"\"))\r\n    return(output)\r\n  }\r\n  hex <- replicate(n = n, generate_hex(), simplify = TRUE)\r\n  return(hex)\r\n}\r\n\r\nplot_hex <- function(hex, pad = 0.1) {\r\n  n <- length(hex)\r\n  old <- graphics::par(mar = c(0, 0, 0, 0))\r\n  on.exit(graphics::par(old))\r\n  # label colours\r\n  lum_from_rgb <- function(rgb) {\r\n    sum(c(0.2126, 0.7152, 0.0722)*rgb)\r\n  }\r\n  light_or_dark <- function(hex) {\r\n    rgb <- as.data.frame(col2rgb(hex))\r\n    lum <- apply(rgb, 2, lum_from_rgb)\r\n    c(\"white\", \"black\")[(lum > 128)+1]\r\n  }\r\n  # plot colours\r\n  graphics::image(\r\n    x = 1,\r\n    y = 1:n,\r\n    z = matrix(1:n, nrow = 1),\r\n    col = rev(hex),\r\n    ylab = \"\", xaxt = \"n\", yaxt = \"n\", bty = \"n\"\r\n  )\r\n  # add labels\r\n  graphics::text(\r\n    x = 1,\r\n    y = 1:n,\r\n    cex = 1.5,\r\n    labels = rev(hex),\r\n    col = light_or_dark(rev(hex))\r\n  )\r\n}\r\n\r\n\r\n# UI ----------------------------------------------------------------------\r\n\r\nui <- fluidPage(\r\n  theme = shinytheme(\"darkly\"),\r\n  titlePanel(\"Palette Generator\"),\r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      hr(),\r\n      # Select number of colours\r\n      selectInput(\r\n        inputId = \"n_colours\",\r\n        label = \"Number of colors:\",\r\n        choices = 1:12,\r\n        selected = 6\r\n      ),\r\n      # Keep some colours\r\n      uiOutput(\"keep_check\"),\r\n      # Regenerate palette\r\n      actionButton(\r\n        inputId = \"generate\",\r\n        label = \"Regenerate palette\"\r\n      ),\r\n      width = 6\r\n    ),\r\n    mainPanel(\r\n      plotOutput(\"plot_palette\"),\r\n      br(),\r\n      markdown(\"Use this palette in R:\"),\r\n      verbatimTextOutput(\"r_palette\"),\r\n      markdown(\"Use this palette in Python:\"),\r\n      verbatimTextOutput(\"py_palette\"),\r\n      br(),\r\n      width = 6\r\n    )\r\n  )\r\n)\r\n\r\n\r\n# Server ------------------------------------------------------------------\r\n\r\nserver <- function(input, output) {\r\n  # Generate palette\r\n  num_generate <- eventReactive(\r\n    c(input$n_colours, input$keep_colours, input$generate),\r\n    {\r\n      num_cols <- as.numeric(input$n_colours) - length(input$keep_colours)\r\n    }\r\n  )\r\n\r\n  # Generate palette\r\n  palette <- eventReactive(\r\n    c(input$n_colours, input$generate),\r\n    {\r\n      c(input$keep_colours, random_hex(n = num_generate()))\r\n    }\r\n  )\r\n\r\n  # Colours to keep\r\n  output$keep_check <- renderUI({\r\n    checkboxGroupInput(\r\n      inputId = \"keep_colours\",\r\n      label = \"Colours to keep:\",\r\n      choices = palette(),\r\n      selected = input$keep_colours\r\n    )\r\n  })\r\n\r\n  # Plot palette\r\n  output$plot_palette <- renderPlot({\r\n    plot_hex(palette())\r\n  })\r\n\r\n  # Vector of palettes in R\r\n  output$r_palette <- renderPrint({\r\n    cat(paste0(\r\n      \"c(\",\r\n      paste0(\r\n        paste0(\"'\", palette(), \"'\"),\r\n        collapse = \", \"\r\n      ), \")\"\r\n    ))\r\n  })\r\n\r\n  # Vector of palettes in Python\r\n  output$py_palette <- renderPrint({\r\n    cat(paste0(\r\n      \"[\",\r\n      paste0(\r\n        paste0(\"'\", palette(), \"'\"),\r\n        collapse = \", \"\r\n      ), \"]\"\r\n    ))\r\n  })\r\n}\r\n\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
